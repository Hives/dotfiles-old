call plug#begin('~/.vim/plugged')

let g:plug_timeout = 1000
function! BuildYCM(info)
    " info is a dictionary with 3 fields
    " - name:   name of the plugin
    " - status: 'installed', 'updated', or 'unchanged'
    "       
    " - force:  set on PlugInstall! or PlugUpdate!
    if a:info.status == 'installed' || a:info.force
        !./install.py --js-completer --go-completer
    endif
endfunction

Plug 'tpope/vim-sensible' " a set of sensible defaults
Plug 'w0rp/ale' " asynchronous linting/fixing
Plug 'chaoren/vim-wordmotion' " provides CamelCase motion through words
Plug 'tpope/vim-liquid' " syntax highlighting for liquid + jekyll enhancements
Plug 'andymass/vim-matchup' " enhances vim's '%' motion and matching
Plug 'scrooloose/nerdcommenter' " automated commenting
Plug 'itchyny/lightline.vim' " status bar
Plug 'micha/vim-colors-solarized' " the low contrast colour scheme we all know and love
Plug 'Sirver/ultisnips' " snippets
Plug 'junegunn/fzf' " fuzzy finder - requires fzf to be installed seperately
" Plug 'hives/goyo.vim' " distraction free editing (my fork)
" Plug 'reedes/vim-pencil'
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') } " code completion

call plug#end()

" LIGHTLINE
set noshowmode " hide --INSERT--, not required with coloured status bar
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename' ] ],
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
      \ }

" append * for 'changes need saving' to the filename
function! LightlineFilename()
  let modified = &modified ? ' *' : ''
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  return filename . modified
endfunction

let g:lightline.separator = { 'left': '', 'right': '' }
let g:lightline.subseparator = { 'left': '', 'right': '' }

" NERD COMMENTER
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>

" SOLARIZED
colorscheme solarized
set background=dark
call togglebg#map("<F5>")

" GOYO
" let g:goyo_width = 100
" let g:goyo_height = '100%'

" ULTISNIPS
" let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']
" " make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'
" " better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" SPACES AND TABS
set tabstop=4             " number of visual spaces per tab
set softtabstop=4         " number of spaces in tab when editing
set shiftwidth=4
set expandtab             " tabs are spaces
autocmd Filetype ruby set softtabstop=2
autocmd Filetype ruby set shiftwidth=2
autocmd Filetype ruby set tabstop=2
autocmd Filetype liquid set softtabstop=2
autocmd Filetype liquid set shiftwidth=2
autocmd Filetype liquid set tabstop=2

if has('linebreak')
  set linebreak                       " wrap long lines at characters in 'breakat'
endif

if has('linebreak')
  let &showbreak='↳ '                 " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif


" UI CONFIG
" set list                              " show whitespace while typing
set number
set showcmd
set cursorline
" set cursorcolumn
set number relativenumber
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
set colorcolumn=80

" SEARCHING
set ignorecase
set smartcase
set incsearch
set hlsearch

" SPELLCHECK
" autocmd FileType markdown,mkd setlocal spell
" autocmd FileType text         setlocal spell

" MARKDOWN
au BufRead,BufNewFile *.md call functions#plaintext()

" Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" set cursor in normal and insert modes
let &t_SI .= "\<Esc>[4 q"
let &t_EI .= "\<Esc>[2 q"
" 1 or 0 -> blinking block
" 2 -> steady block
" 3 -> blinking underscore
" 4 -> steady underscore
" Recent versions of xterm (282 or above) also support
" 5 -> blinking vertical bar
" 6 -> solid vertical bar

" something to do with stopping the delay when changing to normal mode?!
set timeoutlen=1000 ttimeoutlen=0

" make Ctrl-C copy to both x clipboard and primary selection
" requires gvim to be installed?!
" see https://www.youtube.com/watch?v=E_rbfQqrm7g
vnoremap <C-c> "*y :let @+=@*<CR>

" Run xrdb whenever Xdefaults or Xresources are updated.
autocmd BufWritePost ~/.Xresources,~/.Xdefaults !xrdb %
